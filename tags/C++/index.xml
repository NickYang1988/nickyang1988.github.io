<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on C&#43;&#43;爱好者博客</title>
    <link>https://cppfans.org/tags/C&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on C&#43;&#43;爱好者博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 03 Apr 2015 02:14:11 +0000</lastBuildDate>
    
	<atom:link href="https://cppfans.org/tags/C++/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>介绍一个headonly的log库easylogging&#43;&#43;</title>
      <link>https://cppfans.org/1901.html</link>
      <pubDate>Fri, 03 Apr 2015 02:14:11 +0000</pubDate>
      
      <guid>https://cppfans.org/1901.html</guid>
      <description>因为TX的log要求按照小时滚动，并且按照大小滚动，原来的glog设置完大小后，容量了就不会再写入了，而且按小时滚动也很麻烦，所以就找了找其他的log库。 主要要求简单上手，支持大小和时间滚动，不需要改动太多。 看了之前用过的log4cxx等库，发现编译成静态文件后太大了，我们又必须</description>
    </item>
    
    <item>
      <title>google-breakpad在C&#43;&#43; 11下编译错误修改</title>
      <link>https://cppfans.org/1730.html</link>
      <pubDate>Mon, 29 Sep 2014 06:23:27 +0000</pubDate>
      
      <guid>https://cppfans.org/1730.html</guid>
      <description>我只用到了exception_handler模块，暂时还未用到Server模块，因为用到了C++ 11的一些特性，而google-breadpad还没有C++11版本，所以做了一些修改，集中在类型定义处 1. typedef typeof(((struct user*) 0)-&amp;gt;u_debugreg[0]) debugreg_t; 修改为 #if __cplusplus &amp;gt; 199711L&amp;lt;br /&amp;gt; typedef std::remove_reference&amp;lt;decltype(((struct user*) 0)-&amp;gt;u_debugreg[0])&amp;gt;::type debugreg_t;&amp;lt;br /&amp;gt; #else&amp;lt;br /&amp;gt; typedef typeof(((struct user*) 0)-&amp;gt;u_debugreg[0]) debugreg_t;&amp;lt;br /&amp;gt; #endif &amp;nbsp; 2. typedef typeof(((elf_aux_entry*) 0)-&amp;gt;a_un.a_val) elf_aux_val_t; 修改为 #if __cplusplus</description>
    </item>
    
    <item>
      <title>[投稿]operator delete异常分析</title>
      <link>https://cppfans.org/1716.html</link>
      <pubDate>Mon, 22 Sep 2014 02:23:20 +0000</pubDate>
      
      <guid>https://cppfans.org/1716.html</guid>
      <description>C 中delete表达式执行的操作是：1，调用析构函数；2，释放对象内存（operator delete(&amp;hellip;)）。 如果父类的析构函数没有声明为virtual函数，且子类中至少存在一个virtual函数，此时将子类的对象地址赋值给父类指针。当对父类的指针执行delete操</description>
    </item>
    
    <item>
      <title>share_ptr的几个注意点</title>
      <link>https://cppfans.org/1641.html</link>
      <pubDate>Wed, 14 May 2014 01:24:35 +0000</pubDate>
      
      <guid>https://cppfans.org/1641.html</guid>
      <description>智能指针在boost中很早就有了，在tr1上也很早，但是没怎么用，后来0x标准出来之后，智能指针变成了标准库，所以现在用起来就不区分boost和std了。 主要说下share_ptr的几个注意点，待补全。 1.环状的链式结构可能会形成内存泄露 例如： class BaseClass; class ChildClass; typedef std::shared_ptr&amp;lt;BaseClass&amp;gt; BaseClassPtr; typedef std::shared_ptr&amp;lt;ChildClass&amp;gt; ChildClassPtr; class BaseClass { public: ChildClassPtr childClass; protected: private:</description>
    </item>
    
    <item>
      <title>mysqlpp中一些特殊功能总结</title>
      <link>https://cppfans.org/1634.html</link>
      <pubDate>Tue, 15 Apr 2014 08:52:29 +0000</pubDate>
      
      <guid>https://cppfans.org/1634.html</guid>
      <description>之前有写过一篇mysql++的文章 《C++使用MySql++操作数据库实例》,里面讲了C++如何用mysql++的库来操作mysql数据库，现在这个手机项目原来的mysql操作库是从mysql原生封装的，大致做了三四层，看着挺麻烦的，就换成了mysql++，不过这次用遇到了一些问</description>
    </item>
    
    <item>
      <title>[转]C&#43;&#43;强大背后</title>
      <link>https://cppfans.org/1557.html</link>
      <pubDate>Wed, 22 Jan 2014 05:00:05 +0000</pubDate>
      
      <guid>https://cppfans.org/1557.html</guid>
      <description>在31年前(1979年)，一名刚获得博士学位的研究员，为了开发一个软件项目发明了一门新编程语言，该研究员名为Bjarne Stroustrup，该门语言则命名为——C with classes，四年后改称为C++。C++是一门通用编程语言，支持多种编程范式，包括过程式、面向对象(object</description>
    </item>
    
    <item>
      <title>使用jsoncpp解析JSON数据</title>
      <link>https://cppfans.org/1445.html</link>
      <pubDate>Tue, 05 Mar 2013 15:36:28 +0000</pubDate>
      
      <guid>https://cppfans.org/1445.html</guid>
      <description>上节《JSON数据格式》中我们讲到了JSON的数据格式和一些应用的地方,接着上面的说下去，jsoncpp和boost.property_tree都可以解析JSON文件，我们先将jsoncpp如何解析。 1.jsoncpp是什么？ jsoncpp是一个使用C++语言来解析json文件的</description>
    </item>
    
    <item>
      <title>为何python现在越来越多的人在用了？</title>
      <link>https://cppfans.org/1436.html</link>
      <pubDate>Wed, 09 Jan 2013 14:05:07 +0000</pubDate>
      
      <guid>https://cppfans.org/1436.html</guid>
      <description>曾几何时，python这门语言我并没有听过，那个时候只知道C，后来学了C++，用了C++ Builder和VS，再后来学了C#的皮毛，继之是Lua，觉得差不多了。但是最近买了本python的书之后，觉得python处理问题更简便了。 C++之父Bjarne Stroustrup曾经说过</description>
    </item>
    
    <item>
      <title>C&#43;&#43; POD(Plain Old Data)类型</title>
      <link>https://cppfans.org/1431.html</link>
      <pubDate>Sun, 30 Dec 2012 03:41:23 +0000</pubDate>
      
      <guid>https://cppfans.org/1431.html</guid>
      <description>群里发过来一份他们公司的笔试题，看了下，发现里面考了一个判断如下是否为POD类型，没搞明白什么是POD，多方查阅后，发现其实是指一个C风格代码的概念。 POD全称Plain Old Data是指C风格的struct结构体定义的数据结构，其中struct结构体中只能定义常规数据类型(不能含有</description>
    </item>
    
    <item>
      <title>分享自定义静态断言代码</title>
      <link>https://cppfans.org/1408.html</link>
      <pubDate>Wed, 21 Nov 2012 01:20:47 +0000</pubDate>
      
      <guid>https://cppfans.org/1408.html</guid>
      <description>本文代码来自于QQ群中nous大神，类似于static assert，不过断言异常内容可以自定义。 代码分为boost版本和标准版本，使用ENSURE_HAS_BOOST 宏来区分。 代码： // // ensure.hpp // // Copyright (c) Nous Xiong. // // Macro ENSURE impl. // #ifndef ENSURE_HPP #define ENSURE_HPP #ifdef ENSURE_HAS_BOOST #include &amp;lt;boost/exception/all&amp;gt; #include &amp;lt;boost/thread/tss.hpp&amp;gt; #include &amp;lt;boost/preprocessor/seq/for_each.hpp&amp;gt; #include &amp;lt;boost/integer.hpp&amp;gt; #include &amp;lt;stdexcept&amp;gt; #include &amp;lt;sstream&amp;gt; #include &amp;lt;iostream&amp;gt; namespace un { /// 运行时刻信息 typedef boost::error_info&amp;lt;struct tag_runtime, std::string&amp;gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 0x之auto - 从初始化中推断数据类型</title>
      <link>https://cppfans.org/1398.html</link>
      <pubDate>Wed, 07 Nov 2012 01:40:02 +0000</pubDate>
      
      <guid>https://cppfans.org/1398.html</guid>
      <description>引言 曾几何时，C++ 0x出现在我们眼前，我们还在苦逼的用老的规则写代码，因为我们是码畜，我们的顶头上司要求我们必须用土的掉渣的VS2005来写代码，并且用各种存在很棘手问题的库，还有我们的用户都用的XP，新的库包含一些其他的内容，用户根本都没法用，所以我们依然苦逼着。不过曙光就在</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 0x之右值引用</title>
      <link>https://cppfans.org/1397.html</link>
      <pubDate>Sun, 04 Nov 2012 09:39:05 +0000</pubDate>
      
      <guid>https://cppfans.org/1397.html</guid>
      <description>C++ 0x标准出来有一段时间了，一直没时间看，导致最近看一些代码完全不明白是什么意思了，只好硬着头皮来看了。 这次先说一个简单的，右值引用。 关于引用，大家都很清楚了，只会做一标识，而不会拷贝对象，例如：int a = 0; int&amp;amp; b = a; 这个就是传统的引用，如今也称为左值引用，一般我们将引用用在函数返</description>
    </item>
    
    <item>
      <title>C&#43;&#43;使用MySql&#43;&#43;操作数据库实例</title>
      <link>https://cppfans.org/1117.html</link>
      <pubDate>Sun, 04 Mar 2012 14:30:34 +0000</pubDate>
      
      <guid>https://cppfans.org/1117.html</guid>
      <description>有朋友让帮忙写个C++修改数据库中用户名密码的工具，因为他是做VPN的，要给很多客户端展示访问速度等，有一个固定的用户名来展示，但是每次给用户试用的是不同的密码，是随机生成的。 所以就想到了用MySql++这个数据库操作类库，我们项目中也是用这个的，非常好用。 MySql++简介： MySQL++</description>
    </item>
    
    <item>
      <title>简单的模拟多线程引用计数原理</title>
      <link>https://cppfans.org/1033.html</link>
      <pubDate>Sun, 18 Dec 2011 08:08:28 +0000</pubDate>
      
      <guid>https://cppfans.org/1033.html</guid>
      <description>大家都知道多线程编程学习中有一个很重要的东西——引用计数，一个线程的生或死或运行状态都跟这个计数有关，他同样是在适当的时候加加减减的。这篇文章的目的就是模拟下简单的引用计数，原因是因为项目中GateServer莫名宕机，而且运维没有给过来宕机详细信息中的偏移地址，所以纵然我们又c</description>
    </item>
    
    <item>
      <title>[转]现代C&#43;&#43;风格的新元素</title>
      <link>https://cppfans.org/1003.html</link>
      <pubDate>Wed, 16 Nov 2011 15:21:18 +0000</pubDate>
      
      <guid>https://cppfans.org/1003.html</guid>
      <description>****“C++11就像一门新的语言。” – Bjarne Stroustrup C++11标准推出了很多有用的新特性。本文特别关注相比C++98更像是一门新语言的那部分特性，因为： 这些特性改变了编写C++程序使用的代码风格和习语[TODO]，通常也包括你设计C++函数库的方式。例如，你会看到更多参数和返回值类型为</description>
    </item>
    
  </channel>
</rss>