<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>优化 on C&#43;&#43;爱好者博客</title>
    <link>https://cppfans.org/tags/%E4%BC%98%E5%8C%96/</link>
    <description>Recent content in 优化 on C&#43;&#43;爱好者博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 13 Nov 2015 08:26:16 +0000</lastBuildDate>
    
	<atom:link href="https://cppfans.org/tags/%E4%BC%98%E5%8C%96/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>记录《QMWS》服务器性能优化过程</title>
      <link>https://cppfans.org/2018.html</link>
      <pubDate>Fri, 13 Nov 2015 08:26:16 +0000</pubDate>
      
      <guid>https://cppfans.org/2018.html</guid>
      <description>性能优化(图片来自网络) 本文是为了记录下《QMWS》项目服务器在对外测试期间，性能表现和技术审核时的性能表现差距很大，从而做出的一些优化过程，期间还是比较头疼，接近两个连续通宵来修改。第一个通宵一直在查找问题和猜问题，找问题是如何出现的，第二天主要是解决对应的性能问题。 性能问题主</description>
    </item>
    
    <item>
      <title>[转]linux下TCP/IP及内核参数优化调优</title>
      <link>https://cppfans.org/1945.html</link>
      <pubDate>Thu, 25 Jun 2015 06:41:46 +0000</pubDate>
      
      <guid>https://cppfans.org/1945.html</guid>
      <description>via:http://www.sudops.com/linux-kernel-tcp-ip-sysctl-optimize.html Linux下TCP/IP及内核参数优化有多种方式，参数配置得当可以大大提高系统的性能，也可以根据特定场景进行专门的优化，如TIME_WAIT过高，DDOS攻击等等。 如下配置是写在sysctl.conf中，可使用sysctl -p生效，文中附带了一些默认值和中文解释（从网上收集和翻</description>
    </item>
    
    <item>
      <title>[转载]永远不要将三种东西放进数据库里</title>
      <link>https://cppfans.org/1412.html</link>
      <pubDate>Sat, 01 Dec 2012 01:25:40 +0000</pubDate>
      
      <guid>https://cppfans.org/1412.html</guid>
      <description>导读：作者Frank Wiles发 表了一篇博文,Frank Wiles曾在很多演讲里说过,改进你的系统的最好的方法是先避免做“蠢事”.并不是说你或你开发的东西“蠢”,只是有些决定很容易被人们忽略掉其暗含的 牵连,认识不到这样做对系统维护尤其是系统升级带来多大的麻烦.作为一个顾问,像这样</description>
    </item>
    
    <item>
      <title>本次开放测试卡建号问题分析——MySQL配置优化方法</title>
      <link>https://cppfans.org/712.html</link>
      <pubDate>Sun, 21 Aug 2011 09:51:29 +0000</pubDate>
      
      <guid>https://cppfans.org/712.html</guid>
      <description>&lt;p&gt;本次的开放测试依然在进行中，昨天关于卡建号的问题大家讨论了一下解决办法，对逻辑方面也检查了一下，不过逻辑方面很久都没人改过了，如果出问题应该两个项目都出问题，结果另外一个从来不卡的，所以应该不是逻辑上的问题，结果去检查MySQL的配置，才发现了原因。&lt;/p&gt;

&lt;p&gt;是MySQL中打Log过于频繁导致的原因，原来的配置是 innodb_flush_log_at_trx_commit = 1，有一条处理就等待写LLog到磁盘，写入磁盘想对耗时比价多，所以非常卡，本次测试参数是1的测试结果是60-90毫秒，修改成2之后，使用客户端创建一个角色的时间是0 ms，用机器人创建1000个角色压力测试的结果是13ms，这个结果还可以接受，1分钟3000多账号，完全可以理解。前面运维测试的时间是200ms一个，所以呢，又被玩家骂了一顿啊，悲惨的命运。&lt;/p&gt;

&lt;p&gt;简单搜了一下MySQL优化的配置给大家分享下：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;my.ini配置建议：&lt;/p&gt;

&lt;p&gt;table_cache=1024&lt;/p&gt;

&lt;p&gt;物理内存越大,设置就越大.默认为2402,调到512-1024最佳&lt;/p&gt;

&lt;p&gt;innodb_additional_mem_pool_size=4M&lt;/p&gt;

&lt;p&gt;默认为2M&lt;/p&gt;

&lt;p&gt;innodb_flush_log_at_trx_commit=1&lt;/p&gt;

&lt;p&gt;(设置为0就是等到innodb_log_buffer_size列队满后再统一储存,默认为1)&lt;/p&gt;

&lt;p&gt;innodb_log_buffer_size=2M&lt;/p&gt;

&lt;p&gt;默认为1M&lt;/p&gt;

&lt;p&gt;innodb_thread_concurrency=8&lt;/p&gt;

&lt;p&gt;你的服务器CPU有几个就设置为几,建议用默认一般为8&lt;/p&gt;

&lt;p&gt;key_buffer_size=256M&lt;/p&gt;

&lt;p&gt;默认为218         调到128最佳&lt;/p&gt;

&lt;p&gt;tmp_table_size=64M&lt;/p&gt;

&lt;p&gt;默认为16M        调到64-256最挂&lt;/p&gt;

&lt;p&gt;read_buffer_size=4M&lt;/p&gt;

&lt;p&gt;默认为64K&lt;/p&gt;

&lt;p&gt;read_rnd_buffer_size=16M&lt;/p&gt;

&lt;p&gt;默认为256K&lt;/p&gt;

&lt;p&gt;sort_buffer_size=32M&lt;/p&gt;

&lt;p&gt;默认为256K&lt;/p&gt;

&lt;p&gt;max_connections=1024&lt;/p&gt;

&lt;p&gt;默认为1210&lt;/p&gt;

&lt;p&gt;thread_cache_size=120&lt;/p&gt;

&lt;p&gt;默认为60&lt;/p&gt;

&lt;p&gt;query_cache_size=32M&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
  </channel>
</rss>