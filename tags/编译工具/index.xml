<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>编译工具 on C&#43;&#43;爱好者博客</title>
    <link>https://cppfans.org/tags/%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7/</link>
    <description>Recent content in 编译工具 on C&#43;&#43;爱好者博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 07 May 2012 16:25:27 +0000</lastBuildDate>
    
	<atom:link href="https://cppfans.org/tags/%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Windows下如何编译使用boost？</title>
      <link>https://cppfans.org/1317.html</link>
      <pubDate>Mon, 07 May 2012 16:25:27 +0000</pubDate>
      
      <guid>https://cppfans.org/1317.html</guid>
      <description>&lt;p&gt;最近在看boost::asio的东西，所以必须要用到boost库，下载了一个，所以与大家分享下boost库的编译方法。&lt;/p&gt;

&lt;p&gt;本方法应该适用于boost的任何版本，应该适用于任何C++编译器(VC6.0可能对某些库不支持，因为模板的原因)，因为Linux没怎么用，所以只是分享下windows上的编译方法。&lt;/p&gt;

&lt;p&gt;1.下载boost&lt;/p&gt;

&lt;p&gt;从boost官网( &lt;a href=&#34;http://www.boost.org&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34; &gt;&lt;a href=&#34;http://www.boost.org&#34;&gt;http://www.boost.org&lt;/a&gt;&lt;/a&gt; )上下载最新的boost版本，现在最新是1.49版本，解压到自定义目录(为了后面好说明，这里假设为boost_1_49)&lt;/p&gt;

&lt;p&gt;2.编译安装boost&lt;/p&gt;

&lt;p&gt;boost_1_49目录下会有一个bootstrap.bat批处理，可以直接点击它，会在 boost_1_49\tools\build\v2 文件夹下生成两个exe，b2.exe；bjam.exe，拷贝这两个文件到boost_1_49目录下。从cmd命令进入到boost_1_49路径下，如果你不知道如何编译，可以输入&amp;ndash;help查看命令行帮助。&lt;/p&gt;

&lt;p&gt;输入如下命令：&lt;/p&gt;

&lt;pre class=&#34;lang:sh decode:true crayon-selected&#34;&gt;b2 toolset=msvc-10.0 --layout=versioned architecture=x86 address-model=64
link=static variant=debug,release threading=multi runtime-link=static 
--without-python --without-mpi --without-wave --without-graph 
--without-math --without-serialization stage&lt;/pre&gt;

&lt;p&gt;使用不同的命令对你使用boost也会产生很大的影响，因为CPU速度和硬盘现在都已经不是大问题了，所以本例中选择了除了不必要库的完全编译，当然了，你时间够，硬盘够，可以完全编译&lt;/p&gt;

&lt;pre class=&#34;lang:sh decode:true&#34;&gt;b2 --toolset=msvc-10 --build-type=complete&lt;/pre&gt;

&lt;p&gt;解释完以上的命令后，再说完全编译的后果。&lt;/p&gt;

&lt;p&gt;1.toolset：表示编译器工具，我安装的是VS2010，所以是msvc-10(如果你是VS2005，可以使用msvc-8.0 VS2008是msvc-9.0)&lt;/p&gt;

&lt;p&gt;2.architecture：表示架构，也就是你的CPU架构，x86,x64，因为我安装的是win7 32位，所以使用了x86的架构&lt;/p&gt;

&lt;p&gt;3.instruction-set：表示指令集，依然是8086指令集&lt;/p&gt;

&lt;p&gt;4.address-model：表示地址长度为32位&lt;/p&gt;

&lt;p&gt;5.link：表示生成动态/静态链接库，动态链接库是shared，静态链接库是static，一般都会编译成静态库，因为给出程序的时候打包boost的库会非常庞大&lt;/p&gt;

&lt;p&gt;6.variant：表示生成的Debug或者release版本，一般情况下会两种版本都会编译出来的&lt;/p&gt;

&lt;p&gt;7.threading：表示单/多线程编译，一般我们的程序都会用到多线程，所以选择了multi&lt;/p&gt;

&lt;p&gt;8.runtime-link：表示动态/静态链接C/C++运行时库(C/C++ Runtime)，我们选择了动态链接&lt;/p&gt;

&lt;p&gt;9.without/with：表示不需要编译/需要编译哪些库，一些自己不用的库可以无需编译&lt;/p&gt;

&lt;p&gt;10.stage/install：stage表示只生成库文件(DLL和Lib)，install还会生成包含头文件的include目录，推荐使用stage，因为boost_1_49\boost中就是boost库完整的头文件，所以无需再拷贝一份出来。编译出来的库会放在stage文件夹中&lt;/p&gt;

&lt;p&gt;这样一份完整的boost库就生成了，剩下就是直接使用到项目中了。&lt;/p&gt;

&lt;p&gt;上面的编译指令可以存成一个批处理，这样进入到boost_1_49目录后，只需要执行批处理就可以了，更方便。&lt;/p&gt;

&lt;p&gt;(现在看到为什么不推荐使用完全编译了吧，因为完全编译会编译出各种组合的所有情况，需要占用更多的空间和时间，所以建议各位朋友还是放弃了吧)&lt;/p&gt;

&lt;p&gt;使用的时候可以直接包含到项目中，然后在对应的文件中包含相应的头文件即可，例如&lt;/p&gt;

&lt;pre class=&#34;lang:c++ decode:true&#34;&gt;#include &#34;boost/asio.hpp&#34;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>